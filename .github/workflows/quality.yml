name: Quality

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
  schedule:
    - cron: '0 12 5 * *'

jobs:
  check_black:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    - name: Check code formatting with black
      run: |
        black . --check
  check_pylint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .
        pip install -r requirements-dev.txt
    - name: Analysing the code with pylint
      run: |
        pylint $(git ls-files '*.py')

  check_coverage:
    runs-on: ubuntu-latest
    needs: [check_pylint]
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    env:
      GCLOUD_DNS_JSON: '${{ secrets.GCLOUD_DNS_JSON }}'

    steps:
      - uses: actions/checkout@v4

      - name: Install simple_acme_dns package with dev dependencies
        run: |
          python3 -m pip install .
          python3 -m pip install -r requirements-dev.txt

      - name: Install Docker Compose
        shell: bash
        run: |
          MAX_ATTEMPTS=3
          for ATTEMPT_NUM in $(seq 1 $MAX_ATTEMPTS); do
            echo "Attempt ${ATTEMPT_NUM}/${MAX_ATTEMPTS} to install Docker Compose..."
            set -e
            if \
              curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/docker-compose/releases/latest | jq -r '.tag_name')/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && \
              chmod +x /usr/local/bin/docker-compose && \
              docker-compose --version; then
              echo "Docker Compose installed successfully!"
              exit 0 
            else
              echo "Attempt ${ATTEMPT_NUM} failed. Retrying in 3 seconds..."
              sleep 5
            fi
          done

          echo "Failed to install Docker Compose after ${MAX_ATTEMPTS} attempts."
          exit 1

      - name: Start Pebble server
        run: docker-compose -f simple_acme_dns/tests/docker-compose.yml up -d

      - name: Test simple_acme_dns package to ensure 100% coverage
        env:
          ACME_DIRECTORY: 'https://localhost:14000/dir'
        run: |
          python3 -m coverage run --module unittest simple_acme_dns/tests/test_*
          python3 -m coverage report --show-missing --fail-under 100
